function solve(input) {
  let herosCount = input.shift();
  let heros = {};
 
  while (herosCount > 0) {
    let line = input.shift().split(" ");
    let heroName = line[0];
    let hp = Number(line[1]);
    let mp = Number(line[2]);
    if (hp > 100) {
      hp = 100;
    }
    if (mp > 200) {
      mp = 200;
    }
    heros[heroName] = [hp, mp];
    herosCount--;
  }
 
  let [command, hero, amount, name] = input.shift().split(" - ");
  while (command !== "End") {
    switch (command) {
      case "CastSpell":
        if (heros.hasOwnProperty(hero)) {
          let currentHeroArr = heros[hero];
          let currentMP = currentHeroArr[1];
          amount = Number(amount);
          if (currentMP >= amount) {
            currentMP -= amount;
            currentHeroArr[1] = currentMP;
            heros[hero] = currentHeroArr;
            console.log(
              `${hero} has successfully cast ${name} and now has ${currentMP} MP!`
            );
          } else {
            console.log(`${hero} does not have enough MP to cast ${name}!`);
          }
        }
        break;
      case "TakeDamage":
        if (heros.hasOwnProperty(hero)) {
          let currentHeroArr = heros[hero];
          let currentHP = currentHeroArr[0];
          amount = Number(amount);
          currentHP -= amount;
          if (currentHP > 0) {
            currentHeroArr[0] = currentHP;
            heros[hero] = currentHeroArr;
            console.log(
              `${hero} was hit for ${amount} HP by ${name} and now has ${currentHP} HP left!`
            );
          } else {
            delete heros[hero];
            console.log(`${hero} has been killed by ${name}!`);
          }
        }
        break;
      case "Recharge":
        if (heros.hasOwnProperty(hero)) {
          let currentHeroArr = heros[hero];
          let currentMP = currentHeroArr[1];
          let needMP = 200 - currentMP;
          amount = Number(amount);
          currentMP += amount;
          if (currentMP > 200) {
            currentMP = 200;
            amount = needMP;
          }
          currentHeroArr[1] = currentMP;
          heros[hero] = currentHeroArr;
          console.log(`${hero} recharged for ${amount} MP!`);
        }
        break;
      case "Heal":
        if (heros.hasOwnProperty(hero)) {
          let currentHeroArr = heros[hero];
          let currentHP = currentHeroArr[0];
          let needHP = 100 - currentHP;
          amount = Number(amount);
          currentHP += amount;
          if (currentHP > 100) {
            currentHP = 100;
            amount = needHP;
          }
          currentHeroArr[0] = currentHP;
          heros[hero] = currentHeroArr;
          console.log(`${hero} healed for ${amount} HP!`);
        }
        break;
    }
    [command, hero, amount, name] = input.shift().split(" - ");
  }
 
  let herosArray = Object.entries(heros);
 
  let sortedHerosArray = herosArray.sort(sortHeros);
 
  function sortHeros(heroA, heroB) {
    let heroNameA = heroA[0];
    let heroPointsA = heroA[1];
    let heroHPA = heroPointsA[0];
    let heroNameB = heroB[0];
    let heroPointsB = heroB[1];
    let heroHPB = heroPointsB[0];
 
    if (heroHPA == heroHPB) {
      return heroNameA.localeCompare(heroNameB);
    } else {
      return heroHPB - heroHPA;
    }
  }
  let sortedHeros = Object.fromEntries(sortedHerosArray);
 
  for (const hero in sortedHeros) {
    console.log(hero);
    let heroPoints = sortedHeros[hero];
    console.log(` HP: ${heroPoints[0]}`);
    console.log(` MP: ${heroPoints[1]}`);
  }
}
 
solve([
  '4',
  'Adela 90 150',
  'SirMullich 70 40',
  'Ivor 1 111',
  'Tyris 94 61',
  'Heal - SirMullich - 50',
  'Recharge - Adela - 100',
  'CastSpell - Tyris - 1000 - Fireball',
  'TakeDamage - Tyris - 99 - Fireball',
  'TakeDamage - Ivor - 3 - Mosquito',
  'End'
]);
